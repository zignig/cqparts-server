// Code generated by go-bindata.
// sources:
// asset/css/buefy.min.css
// asset/css/bulma.css
// asset/css/extra.css
// asset/css/materialdesignicons.min.css
// asset/fonts/materialdesignicons-webfont.woff
// asset/fonts/materialdesignicons-webfont.woff2
// asset/html/buttons.tmpl
// asset/html/dev.tmpl
// asset/html/index.tmpl
// asset/html/layout.tmpl
// asset/html/viewer.tmpl
// asset/js/GLTFLoader.js
// asset/js/OrbitControls.js
// asset/js/app.js
// asset/js/axios.min.js
// asset/js/buefy.min.js
// asset/js/components.js
// asset/js/cqpartsViewer.js
// asset/js/saver.js
// asset/js/store.js
// asset/js/three.min.js
// asset/js/vue.js
// asset/js/vuex.js
// asset/vue/navfoot.vue
// asset/vue/navithing.vue
// asset/vue/notif.vue
// asset/vue/old/App.vue
// asset/vue/old/card.vue
// asset/vue/old/deck.vue
// asset/vue/old/loaded.vue
// asset/vue/old/model.vue
// asset/vue/old/steps.vue
// asset/vue/old/toolbar.vue
// asset/vue/old/tree.vue
// asset/vue/old/vmenu.vue
// asset/vue/vstrip.vue
// DO NOT EDIT!

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// assetCssBuefyMinCss reads file data from disk. It returns an error on failure.
func assetCssBuefyMinCss() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/css/buefy.min.css"
	name := "asset/css/buefy.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetCssBulmaCss reads file data from disk. It returns an error on failure.
func assetCssBulmaCss() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/css/bulma.css"
	name := "asset/css/bulma.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetCssExtraCss reads file data from disk. It returns an error on failure.
func assetCssExtraCss() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/css/extra.css"
	name := "asset/css/extra.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetCssMaterialdesigniconsMinCss reads file data from disk. It returns an error on failure.
func assetCssMaterialdesigniconsMinCss() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/css/materialdesignicons.min.css"
	name := "asset/css/materialdesignicons.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetFontsMaterialdesigniconsWebfontWoff reads file data from disk. It returns an error on failure.
func assetFontsMaterialdesigniconsWebfontWoff() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/fonts/materialdesignicons-webfont.woff"
	name := "asset/fonts/materialdesignicons-webfont.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetFontsMaterialdesigniconsWebfontWoff2 reads file data from disk. It returns an error on failure.
func assetFontsMaterialdesigniconsWebfontWoff2() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/fonts/materialdesignicons-webfont.woff2"
	name := "asset/fonts/materialdesignicons-webfont.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetHtmlButtonsTmpl reads file data from disk. It returns an error on failure.
func assetHtmlButtonsTmpl() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/html/buttons.tmpl"
	name := "asset/html/buttons.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetHtmlDevTmpl reads file data from disk. It returns an error on failure.
func assetHtmlDevTmpl() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/html/dev.tmpl"
	name := "asset/html/dev.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetHtmlIndexTmpl reads file data from disk. It returns an error on failure.
func assetHtmlIndexTmpl() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/html/index.tmpl"
	name := "asset/html/index.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetHtmlLayoutTmpl reads file data from disk. It returns an error on failure.
func assetHtmlLayoutTmpl() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/html/layout.tmpl"
	name := "asset/html/layout.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetHtmlViewerTmpl reads file data from disk. It returns an error on failure.
func assetHtmlViewerTmpl() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/html/viewer.tmpl"
	name := "asset/html/viewer.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetJsGltfloaderJs reads file data from disk. It returns an error on failure.
func assetJsGltfloaderJs() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/js/GLTFLoader.js"
	name := "asset/js/GLTFLoader.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetJsOrbitcontrolsJs reads file data from disk. It returns an error on failure.
func assetJsOrbitcontrolsJs() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/js/OrbitControls.js"
	name := "asset/js/OrbitControls.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetJsAppJs reads file data from disk. It returns an error on failure.
func assetJsAppJs() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/js/app.js"
	name := "asset/js/app.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetJsAxiosMinJs reads file data from disk. It returns an error on failure.
func assetJsAxiosMinJs() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/js/axios.min.js"
	name := "asset/js/axios.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetJsBuefyMinJs reads file data from disk. It returns an error on failure.
func assetJsBuefyMinJs() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/js/buefy.min.js"
	name := "asset/js/buefy.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetJsComponentsJs reads file data from disk. It returns an error on failure.
func assetJsComponentsJs() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/js/components.js"
	name := "asset/js/components.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetJsCqpartsviewerJs reads file data from disk. It returns an error on failure.
func assetJsCqpartsviewerJs() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/js/cqpartsViewer.js"
	name := "asset/js/cqpartsViewer.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetJsSaverJs reads file data from disk. It returns an error on failure.
func assetJsSaverJs() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/js/saver.js"
	name := "asset/js/saver.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetJsStoreJs reads file data from disk. It returns an error on failure.
func assetJsStoreJs() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/js/store.js"
	name := "asset/js/store.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetJsThreeMinJs reads file data from disk. It returns an error on failure.
func assetJsThreeMinJs() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/js/three.min.js"
	name := "asset/js/three.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetJsVueJs reads file data from disk. It returns an error on failure.
func assetJsVueJs() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/js/vue.js"
	name := "asset/js/vue.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetJsVuexJs reads file data from disk. It returns an error on failure.
func assetJsVuexJs() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/js/vuex.js"
	name := "asset/js/vuex.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueNavfootVue reads file data from disk. It returns an error on failure.
func assetVueNavfootVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/navfoot.vue"
	name := "asset/vue/navfoot.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueNavithingVue reads file data from disk. It returns an error on failure.
func assetVueNavithingVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/navithing.vue"
	name := "asset/vue/navithing.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueNotifVue reads file data from disk. It returns an error on failure.
func assetVueNotifVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/notif.vue"
	name := "asset/vue/notif.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueOldAppVue reads file data from disk. It returns an error on failure.
func assetVueOldAppVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/old/App.vue"
	name := "asset/vue/old/App.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueOldCardVue reads file data from disk. It returns an error on failure.
func assetVueOldCardVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/old/card.vue"
	name := "asset/vue/old/card.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueOldDeckVue reads file data from disk. It returns an error on failure.
func assetVueOldDeckVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/old/deck.vue"
	name := "asset/vue/old/deck.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueOldLoadedVue reads file data from disk. It returns an error on failure.
func assetVueOldLoadedVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/old/loaded.vue"
	name := "asset/vue/old/loaded.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueOldModelVue reads file data from disk. It returns an error on failure.
func assetVueOldModelVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/old/model.vue"
	name := "asset/vue/old/model.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueOldStepsVue reads file data from disk. It returns an error on failure.
func assetVueOldStepsVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/old/steps.vue"
	name := "asset/vue/old/steps.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueOldToolbarVue reads file data from disk. It returns an error on failure.
func assetVueOldToolbarVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/old/toolbar.vue"
	name := "asset/vue/old/toolbar.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueOldTreeVue reads file data from disk. It returns an error on failure.
func assetVueOldTreeVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/old/tree.vue"
	name := "asset/vue/old/tree.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueOldVmenuVue reads file data from disk. It returns an error on failure.
func assetVueOldVmenuVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/old/vmenu.vue"
	name := "asset/vue/old/vmenu.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetVueVstripVue reads file data from disk. It returns an error on failure.
func assetVueVstripVue() (*asset, error) {
	path := "/opt/cqparts-server/src/server/asset/vue/vstrip.vue"
	name := "asset/vue/vstrip.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset/css/buefy.min.css": assetCssBuefyMinCss,
	"asset/css/bulma.css": assetCssBulmaCss,
	"asset/css/extra.css": assetCssExtraCss,
	"asset/css/materialdesignicons.min.css": assetCssMaterialdesigniconsMinCss,
	"asset/fonts/materialdesignicons-webfont.woff": assetFontsMaterialdesigniconsWebfontWoff,
	"asset/fonts/materialdesignicons-webfont.woff2": assetFontsMaterialdesigniconsWebfontWoff2,
	"asset/html/buttons.tmpl": assetHtmlButtonsTmpl,
	"asset/html/dev.tmpl": assetHtmlDevTmpl,
	"asset/html/index.tmpl": assetHtmlIndexTmpl,
	"asset/html/layout.tmpl": assetHtmlLayoutTmpl,
	"asset/html/viewer.tmpl": assetHtmlViewerTmpl,
	"asset/js/GLTFLoader.js": assetJsGltfloaderJs,
	"asset/js/OrbitControls.js": assetJsOrbitcontrolsJs,
	"asset/js/app.js": assetJsAppJs,
	"asset/js/axios.min.js": assetJsAxiosMinJs,
	"asset/js/buefy.min.js": assetJsBuefyMinJs,
	"asset/js/components.js": assetJsComponentsJs,
	"asset/js/cqpartsViewer.js": assetJsCqpartsviewerJs,
	"asset/js/saver.js": assetJsSaverJs,
	"asset/js/store.js": assetJsStoreJs,
	"asset/js/three.min.js": assetJsThreeMinJs,
	"asset/js/vue.js": assetJsVueJs,
	"asset/js/vuex.js": assetJsVuexJs,
	"asset/vue/navfoot.vue": assetVueNavfootVue,
	"asset/vue/navithing.vue": assetVueNavithingVue,
	"asset/vue/notif.vue": assetVueNotifVue,
	"asset/vue/old/App.vue": assetVueOldAppVue,
	"asset/vue/old/card.vue": assetVueOldCardVue,
	"asset/vue/old/deck.vue": assetVueOldDeckVue,
	"asset/vue/old/loaded.vue": assetVueOldLoadedVue,
	"asset/vue/old/model.vue": assetVueOldModelVue,
	"asset/vue/old/steps.vue": assetVueOldStepsVue,
	"asset/vue/old/toolbar.vue": assetVueOldToolbarVue,
	"asset/vue/old/tree.vue": assetVueOldTreeVue,
	"asset/vue/old/vmenu.vue": assetVueOldVmenuVue,
	"asset/vue/vstrip.vue": assetVueVstripVue,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"buefy.min.css": &bintree{assetCssBuefyMinCss, map[string]*bintree{}},
			"bulma.css": &bintree{assetCssBulmaCss, map[string]*bintree{}},
			"extra.css": &bintree{assetCssExtraCss, map[string]*bintree{}},
			"materialdesignicons.min.css": &bintree{assetCssMaterialdesigniconsMinCss, map[string]*bintree{}},
		}},
		"fonts": &bintree{nil, map[string]*bintree{
			"materialdesignicons-webfont.woff": &bintree{assetFontsMaterialdesigniconsWebfontWoff, map[string]*bintree{}},
			"materialdesignicons-webfont.woff2": &bintree{assetFontsMaterialdesigniconsWebfontWoff2, map[string]*bintree{}},
		}},
		"html": &bintree{nil, map[string]*bintree{
			"buttons.tmpl": &bintree{assetHtmlButtonsTmpl, map[string]*bintree{}},
			"dev.tmpl": &bintree{assetHtmlDevTmpl, map[string]*bintree{}},
			"index.tmpl": &bintree{assetHtmlIndexTmpl, map[string]*bintree{}},
			"layout.tmpl": &bintree{assetHtmlLayoutTmpl, map[string]*bintree{}},
			"viewer.tmpl": &bintree{assetHtmlViewerTmpl, map[string]*bintree{}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"GLTFLoader.js": &bintree{assetJsGltfloaderJs, map[string]*bintree{}},
			"OrbitControls.js": &bintree{assetJsOrbitcontrolsJs, map[string]*bintree{}},
			"app.js": &bintree{assetJsAppJs, map[string]*bintree{}},
			"axios.min.js": &bintree{assetJsAxiosMinJs, map[string]*bintree{}},
			"buefy.min.js": &bintree{assetJsBuefyMinJs, map[string]*bintree{}},
			"components.js": &bintree{assetJsComponentsJs, map[string]*bintree{}},
			"cqpartsViewer.js": &bintree{assetJsCqpartsviewerJs, map[string]*bintree{}},
			"saver.js": &bintree{assetJsSaverJs, map[string]*bintree{}},
			"store.js": &bintree{assetJsStoreJs, map[string]*bintree{}},
			"three.min.js": &bintree{assetJsThreeMinJs, map[string]*bintree{}},
			"vue.js": &bintree{assetJsVueJs, map[string]*bintree{}},
			"vuex.js": &bintree{assetJsVuexJs, map[string]*bintree{}},
		}},
		"vue": &bintree{nil, map[string]*bintree{
			"navfoot.vue": &bintree{assetVueNavfootVue, map[string]*bintree{}},
			"navithing.vue": &bintree{assetVueNavithingVue, map[string]*bintree{}},
			"notif.vue": &bintree{assetVueNotifVue, map[string]*bintree{}},
			"old": &bintree{nil, map[string]*bintree{
				"App.vue": &bintree{assetVueOldAppVue, map[string]*bintree{}},
				"card.vue": &bintree{assetVueOldCardVue, map[string]*bintree{}},
				"deck.vue": &bintree{assetVueOldDeckVue, map[string]*bintree{}},
				"loaded.vue": &bintree{assetVueOldLoadedVue, map[string]*bintree{}},
				"model.vue": &bintree{assetVueOldModelVue, map[string]*bintree{}},
				"steps.vue": &bintree{assetVueOldStepsVue, map[string]*bintree{}},
				"toolbar.vue": &bintree{assetVueOldToolbarVue, map[string]*bintree{}},
				"tree.vue": &bintree{assetVueOldTreeVue, map[string]*bintree{}},
				"vmenu.vue": &bintree{assetVueOldVmenuVue, map[string]*bintree{}},
			}},
			"vstrip.vue": &bintree{assetVueVstripVue, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

